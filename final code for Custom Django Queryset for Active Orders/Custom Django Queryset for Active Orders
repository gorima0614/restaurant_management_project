# orders/querysets.py

from django.db import models

class OrderQuerySet(models.QuerySet):
    def active(self):
        """
        Filters orders that are active.
        If using `is_active`, filters by that.
        If using `delivery_status`, you can adjust logic accordingly.
        """
        return self.filter(is_active=True)
        # Or if using delivery_status:
        # return self.filter(delivery_status__in=["pending", "processing"])

# orders/managers.py

from django.db import models
from .querysets import OrderQuerySet

class OrderManager(models.Manager):
    def get_queryset(self):
        return OrderQuerySet(self.model, using=self._db)

    def active(self):
        return self.get_queryset().active()

# orders/models.py

from django.db import models
from .managers import OrderManager

class Order(models.Model):
    customer_name = models.CharField(max_length=255)
    is_active = models.BooleanField(default=True)  # or delivery_status = models.CharField(...)
    created_at = models.DateTimeField(auto_now_add=True)

    objects = OrderManager()  # Attach custom manager

    def __str__(self):
        return f"Order {self.id} - {self.customer_name}"

# Get all active orders
active_orders = Order.objects.active()

# You can also chain filters
recent_active_orders = Order.objects.active().filter(created_at__gte='2025-01-01')

# In OrderQuerySet
def active(self):
    return self.filter(delivery_status__in=['pending', 'processing'])

