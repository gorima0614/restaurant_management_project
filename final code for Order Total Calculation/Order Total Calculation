#orders/utils.py
def calculate_order_total(items):
    """
    Calulate total amount of an order.
    :param items: list of dicts, each dict should contain 'quantity' and 'price' keys
    :return: Decimal total amount
    """
    from decimal import Decimal

    total = Decimal('0.00')
    for item in items:
        quantity = int(item.get('quantity', 0))
        price = Decimal(str(item.get('price', 0)))
        total += quatity * price
    return total

# orders/models.py

from django.db import models

class Order(models.Model):
    customer_name = models.CharField(max_length=255)
    total_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0)

class OrderItem(models.Model):
    order = models.ForeignKey(Order, related_name='items', on_delete=models.CASCADE)
    product_name = models.CharField(max_length=255)
    quantity = models.PositiveIntegerField()
    price = models.DecimalField(max_digits=10, decimal_places=2)

# orders/views.py

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .models import Order, OrderItem
from .utils import calculate_order_total

class CreateOrderAPIView(APIView):
    def post(self, request):
        customer_name = request.data.get('customer_name')
        items = request.data.get('items', [])

        if not items:
            return Response({'error': 'Order must include items.'}, status=status.HTTP_400_BAD_REQUEST)

        total = calculate_order_total(items)
        order = Order.objects.create(customer_name=customer_name, total_amount=total)

        for item in items:
            OrderItem.objects.create(
                order=order,
                product_name=item['product_name'],
                quantity=item['quantity'],
                price=item['price']
            )

        return Response({
            'message': 'Order created successfully',
            'order_id': order.id,
            'total_amount': str(order.total_amount)
        }, status=status.HTTP_201_CREATED)

{
  "customer_name": "John Doe",
  "items": [
    { "product_name": "Pizza", "quantity": 2, "price": "12.50" },
    { "product_name": "Coke", "quantity": 3, "price": "2.00" }
  ]
}

{
  "message": "Order created successfully",
  "order_id": 12,
  "total_amount": "31.00"
}
