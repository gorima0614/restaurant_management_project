# orders/models.py
from django.db import models

class Order(models.Model):
    customer_name = models.CharField(max_length=100)
    total_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Order #{self.pk} - {self.customer_name}"

class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='items')
    product_name = models.CharField(max_length=255)
    quantity = models.PositiveIntegerField()
    price = models.DecimalField(max_digits=8, decimal_places=2)  # per item price

    def __str__(self):
        return f"{self.product_name} x{self.quantity}"

# orders/signals.py
from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver
from .models import Order, OrderItem

def calculate_order_total(order):
    total = sum(item.quantity * item.price for item in order.items.all())
    order.total_amount = total
    order.save(update_fields=['total_amount'])

@receiver(post_save, sender=OrderItem)
@receiver(post_delete, sender=OrderItem)
def update_order_total(sender, instance, **kwargs):
    calculate_order_total(instance.order)

# orders/apps.py
from django.apps import AppConfig

class OrdersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'orders'

    def ready(self):
        import orders.signals  # noqa

python manage.py makemigrations
python manage.py migrate

# orders/admin.py
from django.contrib import admin
from .models import Order, OrderItem

admin.site.register(Order)
admin.site.register(OrderItem)

order = Order.objects.create(customer_name="Alice")
OrderItem.objects.create(order=order, product_name="Pizza", quantity=2, price=10)
OrderItem.objects.create(order=order, product_name="Soda", quantity=1, price=2.5)

# Signal auto-updates order.total_amount to 22.5
