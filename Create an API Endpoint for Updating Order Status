Step 1: Update the Order model

In orders/models.py, ensure that the Order model has a status field with defined choices.

# orders/models.py
from django.db import models

class Order(models.Model):
    STATUS_CHOICES = [
        ('Pending', 'Pending'),
        ('Processing', 'Processing'),
        ('Delivered', 'Delivered'),
        ('Cancelled', 'Cancelled'),
    ]

    customer_name = models.CharField(max_length=100)
    total_amount = models.DecimalField(max_digits=10, decimal_places=2)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Pending')
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Order #{self.id} - {self.status}"

Step 2: Create a Serializer for Updating Status

In orders/serializers.py, create a serializer to validate input data.

# orders/serializers.py
from rest_framework import serializers
from .models import Order

class OrderStatusUpdateSerializer(serializers.Serializer):
    status = serializers.ChoiceField(choices=Order.STATUS_CHOICES)

    def validate_status(self, value):
        if value not in dict(Order.STATUS_CHOICES):
            raise serializers.ValidationError("Invalid order status.")
        return value

Step 3: Create the API View

In orders/views.py, create an API view that handles PUT requests for updating order status.

# orders/views.py
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .models import Order
from .serializers import OrderStatusUpdateSerializer

class OrderStatusUpdateView(APIView):
    """
    API endpoint to update the status of an order by ID.
    """

    def put(self, request, order_id):
        try:
            order = Order.objects.get(pk=order_id)
        except Order.DoesNotExist:
            return Response(
                {"error": "Order not found."},
                status=status.HTTP_404_NOT_FOUND
            )

        serializer = OrderStatusUpdateSerializer(data=request.data)
        if serializer.is_valid():
            new_status = serializer.validated_data['status']
            order.status = new_status
            order.save()
            return Response(
                {
                    "message": f"Order #{order.id} status updated to '{new_status}'.",
                    "order_id": order.id,
                    "new_status": new_status
                },
                status=status.HTTP_200_OK
            )
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

Step 4: Add URL Route

In orders/urls.py, add the route for this new endpoint.

# orders/urls.py
from django.urls import path
from .views import OrderStatusUpdateView

urlpatterns = [
    path('orders/<int:order_id>/update-status/', OrderStatusUpdateView.as_view(), name='update-order-status'),
]

Step 5: Example API Request

Endpoint:

PUT /api/orders/5/update-status/

Request Body (JSON):

{
  "status": "Delivered"
}

Successful Response:

{
  "message": "Order #5 status updated to 'Delivered'.",
  "order_id": 5,
  "new_status": "Delivered"
}

Invalid Status Example:

{
  "status": "Shipped"
}

Response:

{
  "status": [
    "Invalid order status."
  ]
}

✅ (Optional Enhancements)

If you want PATCH requests (partial update) support instead of only PUT:

def patch(self, request, order_id):
    return self.put(request, order_id)

Or if you prefer to use DRF’s GenericAPIView:

from rest_framework.generics import UpdateAPIView

class OrderStatusUpdateView(UpdateAPIView):
    queryset = Order.objects.all()
    serializer_class = OrderStatusUpdateSerializer
    lookup_url_kwarg = 'order_id'

    def update(self, request, *args, **kwargs):
        order = self.get_object()
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        order.status = serializer.validated_data['status']
        order.save()
        return Response({
            "message": f"Order #{order.id} status updated to '{order.status}'."
        })
