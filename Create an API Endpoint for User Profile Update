1. Create a serializer — users/serializers.py
We’ll use Django’s built-in User model (but if you have a custom profile model, it works the same way).

from rest_framework import serializers
from django.contrib.auth.models import User

class UserProfileSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ["first_name", "last_name", "email"]  # only editable fields

2. Create a viewset — users/views.py
We’ll restrict updates so users can only update their own profile.

from rest_framework import viewsets, permissions, status
from rest_framework.response import Response
from django.contrib.auth.models import User
from .serializers import UserProfileSerializer

class UserProfileViewSet(viewsets.ViewSet):
    permission_classes = [permissions.IsAuthenticated]

    def get_object(self):
        # Only allow access to the logged-in user's profile
        return self.request.user

    def retrieve(self, request):
        """GET: Retrieve the logged-in user's profile"""
        user = self.get_object()
        serializer = UserProfileSerializer(user)
        return Response(serializer.data)

    def update(self, request):
        """PUT: Update the logged-in user's profile"""
        user = self.get_object()
        serializer = UserProfileSerializer(user, data=request.data, partial=False)

        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def partial_update(self, request):
        """PATCH: Partially update profile (e.g., only email)"""
        user = self.get_object()
        serializer = UserProfileSerializer(user, data=request.data, partial=True)

        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

3. Register the viewset — users/urls.py
from django.urls import path
from .views import UserProfileViewSet

user_profile = UserProfileViewSet.as_view({
    "get": "retrieve",
    "put": "update",
    "patch": "partial_update",
})

urlpatterns = [
    path("profile/", user_profile, name="user-profile"),
]


Then include this in your project-level urls.py:

from django.urls import path, include

urlpatterns = [
    path("api/users/", include("users.urls")),
]

4. Example usage in Postman
Get profile
GET http://127.0.0.1:8000/api/users/profile/
Authorization: Token <your-auth-token>


Response:

{
  "first_name": "Alice",
  "last_name": "Smith",
  "email": "alice@example.com"
}

Update profile
PUT http://127.0.0.1:8000/api/users/profile/
Authorization: Token <your-auth-token>
Content-Type: application/json


Request body:

{
  "first_name": "Alice",
  "last_name": "Johnson",
  "email": "alice.johnson@example.com"
}


Response:

{
  "first_name": "Alice",
  "last_name": "Johnson",
  "email": "alice.johnson@example.com"
}
