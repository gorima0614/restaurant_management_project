1. home/models.py – Define MenuItem
from django.db import models
from decimal import Decimal

class MenuItem(models.Model):
    name = models.CharField(max_length=100)
    price = models.DecimalField(max_digits=10, decimal_places=2, default=Decimal("0.00"))

    def __str__(self):
        return self.name

2. orders/models.py – Define Order & OrderItem
from django.db import models
from decimal import Decimal
from home.models import MenuItem


class Order(models.Model):
    customer_name = models.CharField(max_length=100)
    created_at = models.DateTimeField(auto_now_add=True)

    def calculate_total(self):
        """
        Calculate the total cost of all order items.
        """
        total = Decimal("0.00")
        for item in self.order_items.all():
            total += item.price * item.quantity
        return total

    def __str__(self):
        return f"Order {self.id} - {self.customer_name}"


class OrderItem(models.Model):
    order = models.ForeignKey(Order, related_name="order_items", on_delete=models.CASCADE)
    menu_item = models.ForeignKey(MenuItem, on_delete=models.CASCADE)
    quantity = models.IntegerField(default=1)
    price = models.DecimalField(max_digits=10, decimal_places=2)

    def save(self, *args, **kwargs):
        """
        Automatically set price from menu item if not provided.
        """
        if not self.price:
            self.price = self.menu_item.price
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.quantity} x {self.menu_item.name}"

3. orders/tests.py – Unit Test
from django.test import TestCase
from home.models import MenuItem
from orders.models import Order, OrderItem
from decimal import Decimal


class OrderModelTest(TestCase):
    def setUp(self):
        # Create sample menu items
        self.pizza = MenuItem.objects.create(name="Pizza", price=Decimal("12.50"))
        self.burger = MenuItem.objects.create(name="Burger", price=Decimal("8.00"))

        # Create order
        self.order = Order.objects.create(customer_name="John Doe")

        # Add items to order
        OrderItem.objects.create(order=self.order, menu_item=self.pizza, quantity=2, price=self.pizza.price)
        OrderItem.objects.create(order=self.order, menu_item=self.burger, quantity=3, price=self.burger.price)

    def test_calculate_total(self):
        total = self.order.calculate_total()
        expected_total = Decimal("12.50") * 2 + Decimal("8.00") * 3  # 25 + 24 = 49
        self.assertEqual(total, expected_total)
