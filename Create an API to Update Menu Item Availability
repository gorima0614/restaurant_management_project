1. Model – home/models.py

If you don’t already have a MenuItem model, create one like this:

from django.db import models
from .models import MenuCategory  # If you already created categories

class MenuItem(models.Model):
    name = models.CharField(max_length=150)
    description = models.TextField(blank=True, null=True)
    price = models.DecimalField(max_digits=8, decimal_places=2)
    is_available = models.BooleanField(default=True)
    category = models.ForeignKey(
        MenuCategory,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="items"
    )

    def __str__(self):
        return self.name

2. Serializer – home/serializers.py

We’ll create a general serializer and a special serializer just for updating availability.

from rest_framework import serializers
from .models import MenuItem

class MenuItemSerializer(serializers.ModelSerializer):
    class Meta:
        model = MenuItem
        fields = ['id', 'name', 'description', 'price', 'is_available', 'category']


class MenuItemAvailabilitySerializer(serializers.Serializer):
    """
    Serializer to validate availability updates only.
    """
    is_available = serializers.BooleanField(required=True)

3. Views – home/views.py

We’ll build a custom APIView for updating availability and include error handling.

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from django.shortcuts import get_object_or_404

from .models import MenuItem
from .serializers import MenuItemSerializer, MenuItemAvailabilitySerializer


class UpdateMenuItemAvailability(APIView):
    """
    API endpoint to update availability of a menu item.
    Accepts: { "is_available": true/false }
    """

    def patch(self, request, pk):
        # Get the menu item by ID or return 404
        menu_item = get_object_or_404(MenuItem, pk=pk)

        serializer = MenuItemAvailabilitySerializer(data=request.data)
        if serializer.is_valid():
            # Update availability
            menu_item.is_available = serializer.validated_data['is_available']
            menu_item.save()

            return Response({
                "message": "Availability updated successfully",
                "menu_item": MenuItemSerializer(menu_item).data
            }, status=status.HTTP_200_OK)
        
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

4. URLs – home/urls.py

Add a new route for updating availability:

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import MenuCategoryViewSet, UpdateMenuItemAvailability

router = DefaultRouter()
router.register(r'menu-categories', MenuCategoryViewSet, basename='menu-category')

urlpatterns = [
    path('', include(router.urls)),

    # Custom endpoint for availability
    path('menu-items/<int:pk>/availability/', UpdateMenuItemAvailability.as_view(), name='menuitem-availability'),
]

5. Example Requests
✅ Update availability (PATCH)
PATCH http://127.0.0.1:8000/api/menu-items/1/availability/
Content-Type: application/json

{
  "is_available": false
}

✅ Success Response
{
  "message": "Availability updated successfully",
  "menu_item": {
    "id": 1,
    "name": "Margherita Pizza",
    "description": "Classic cheese pizza",
    "price": "8.99",
    "is_available": false,
    "category": 2
  }
}

❌ Error Example (invalid data)
PATCH http://127.0.0.1:8000/api/menu-items/1/availability/
Content-Type: application/json

{
  "is_available": "notaboolean"
}


Response:

{
  "is_available": [
    "Must be a valid boolean."
  ]
}
