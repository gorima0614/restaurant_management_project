Step 1: Locate the Order model → orders/models.py

Assuming your Order model has fields like status and total_price.

Here’s how you extend it:

from django.db import models
from django.db.models import Sum

class Order(models.Model):
    STATUS_CHOICES = (
        ("Pending", "Pending"),
        ("Completed", "Completed"),
        ("Cancelled", "Cancelled"),
    )

    user = models.ForeignKey("auth.User", on_delete=models.CASCADE)
    total_price = models.DecimalField(max_digits=10, decimal_places=2)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default="Pending")
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Order #{self.pk} - {self.status}"

    @classmethod
    def calculate_total_revenue(cls):
        """
        Calculates total revenue from all completed orders.
        Returns 0 if no completed orders exist.
        """
        result = cls.objects.filter(status="Completed").aggregate(total=Sum("total_price"))
        return result["total"] or 0

Step 2: Usage

You can now call this method anywhere:

from orders.models import Order

total_revenue = Order.calculate_total_revenue()
print(total_revenue)

Step 3: Write Unit Tests → orders/tests/test_models.py
from django.test import TestCase
from django.contrib.auth.models import User
from decimal import Decimal
from orders.models import Order

class OrderModelTests(TestCase):

    def setUp(self):
        self.user = User.objects.create_user(username="testuser", password="pass123")

        # Completed orders
        Order.objects.create(user=self.user, total_price=Decimal("100.50"), status="Completed")
        Order.objects.create(user=self.user, total_price=Decimal("200.75"), status="Completed")

        # Non-completed orders
        Order.objects.create(user=self.user, total_price=Decimal("50.00"), status="Pending")
        Order.objects.create(user=self.user, total_price=Decimal("75.00"), status="Cancelled")

    def test_calculate_total_revenue(self):
        total_revenue = Order.calculate_total_revenue()
        self.assertEqual(total_revenue, Decimal("301.25"))  # Only completed orders are counted

    def test_calculate_total_revenue_no_completed_orders(self):
        Order.objects.filter(status="Completed").delete()
        total_revenue = Order.calculate_total_revenue()
        self.assertEqual(total_revenue, 0)  # No completed orders should return 0
