1. Create the Review Model (reviews/models.py)

If you don’t already have a Review model, here’s a simple version:

from django.db import models
from django.contrib.auth.models import User

class Review(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="reviews")
    rating = models.PositiveIntegerField(default=1)  # Example: 1–5 stars
    comment = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Review by {self.user.username} - {self.rating} Stars"

2. Create the Serializer (reviews/serializers.py)
from rest_framework import serializers
from .models import Review

class ReviewSerializer(serializers.ModelSerializer):
    user = serializers.StringRelatedField(read_only=True)  # Show username instead of ID

    class Meta:
        model = Review
        fields = ['id', 'user', 'rating', 'comment', 'created_at']

3. Create the API View (reviews/views.py)

We’ll use ListAPIView with pagination:

from rest_framework import generics
from .models import Review
from .serializers import ReviewSerializer

class ReviewListView(generics.ListAPIView):
    queryset = Review.objects.all().order_by('-created_at')  # newest first
    serializer_class = ReviewSerializer

4. Implement Pagination
Option A: Global Pagination (applies to all DRF views)

In settings.py:

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 5,  # Default page size
}

Option B: Custom Pagination Class (only for reviews API)

reviews/pagination.py:

from rest_framework.pagination import PageNumberPagination

class ReviewPagination(PageNumberPagination):
    page_size = 5
    page_size_query_param = 'page_size'
    max_page_size = 20


Then use it in the view:

from .pagination import ReviewPagination

class ReviewListView(generics.ListAPIView):
    queryset = Review.objects.all().order_by('-created_at')
    serializer_class = ReviewSerializer
    pagination_class = ReviewPagination

5. Add URL Pattern (reviews/urls.py)
from django.urls import path
from .views import ReviewListView

urlpatterns = [
    path('reviews/', ReviewListView.as_view(), name='review-list'),
]

6. Example API Response (GET /reviews/?page=1&page_size=2)
{
    "count": 12,
    "next": "http://127.0.0.1:8000/reviews/?page=2&page_size=2",
    "previous": null,
    "results": [
        {
            "id": 1,
            "user": "alice",
            "rating": 5,
            "comment": "Amazing food and service!",
            "created_at": "2025-09-26T10:30:00Z"
        },
        {
            "id": 2,
            "user": "bob",
            "rating": 4,
            "comment": "Good, but could improve delivery time.",
            "created_at": "2025-09-25T15:00:00Z"
        }
    ]
}
