import time

class SessionManager:
    def __init__(self, expiry_seconds):
        """
        Initialize the session manager.
        
        :param expiry_seconds: int - How long a session should remain active (in seconds)
        """
        self.expiry_seconds = expiry_seconds
        self.sessions = {}  # Stores session_id -> creation_time
        print(f"SessionManager initialized with expiry = {expiry_seconds}s")

    def create_session(self, session_id):
        """
        Create a new session and store its creation timestamp.
        
        :param session_id: str - Unique session identifier
        """
        self.sessions[session_id] = time.time()
        print(f"Session '{session_id}' created at {self.sessions[session_id]}")

    def is_session_active(self, session_id):
        """
        Check if a session is still active. If expired, delete it automatically.
        
        :param session_id: str - Unique session identifier
        :return: bool - True if active, False if expired or not found
        """
        if session_id not in self.sessions:
            print(f"Session '{session_id}' not found.")
            return False

        creation_time = self.sessions[session_id]
        current_time = time.time()

        if current_time - creation_time <= self.expiry_seconds:
            print(f"Session '{session_id}' is active.")
            return True
        else:
            # Session expired - remove it automatically
            print(f"Session '{session_id}' expired and removed.")
            del self.sessions[session_id]
            return False

    def delete_session(self, session_id):
        """
        Manually delete a session.
        
        :param session_id: str - Unique session identifier
        :return: str - 'Deleted' or 'Not Found'
        """
        if session_id in self.sessions:
            del self.sessions[session_id]
            print(f"Session '{session_id}' deleted manually.")
            return "Deleted"
        else:
            print(f"Session '{session_id}' not found for deletion.")
            return "Not Found"


# -------------------------
# Example Usage / Test Cases
# -------------------------
if __name__ == "__main__":
    manager = SessionManager(expiry_seconds=5)

    manager.create_session("driver_123")
    time.sleep(3)  # Simulate delay
    print(manager.is_session_active("driver_123"))  # ✅ Should be True

    time.sleep(3)  # Wait more to cross expiry
    print(manager.is_session_active("driver_123"))  # ❌ Should be False

    # Create another session and delete manually
    manager.create_session("rider_456")
    print(manager.delete_session("rider_456"))      # ✅ "Deleted"
    print(manager.is_session_active("rider_456"))   # ❌ False
