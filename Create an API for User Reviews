1. home/serializers.py

We’ll add a serializer for UserReview with validation for rating.

from rest_framework import serializers
from .models import UserReview

class UserReviewSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserReview
        fields = ['id', 'user', 'menu_item', 'rating', 'comment', 'review_date']
        read_only_fields = ['id', 'review_date', 'user']  # user set from request

    def validate_rating(self, value):
        """Ensure rating is between 1 and 5"""
        if value < 1 or value > 5:
            raise serializers.ValidationError("Rating must be between 1 and 5.")
        return value

2. home/views.py

We’ll create:

UserReviewCreateView → handle review creation.

MenuItemReviewListView → list reviews for a specific menu item.

from rest_framework import generics, permissions
from .models import UserReview
from .serializers import UserReviewSerializer

# Create new review
class UserReviewCreateView(generics.CreateAPIView):
    queryset = UserReview.objects.all()
    serializer_class = UserReviewSerializer
    permission_classes = [permissions.IsAuthenticated]  # only logged-in users can review

    def perform_create(self, serializer):
        # set logged-in user automatically
        serializer.save(user=self.request.user)


# Retrieve reviews for a specific menu item
class MenuItemReviewListView(generics.ListAPIView):
    serializer_class = UserReviewSerializer
    permission_classes = [permissions.AllowAny]  # reviews are public

    def get_queryset(self):
        menu_item_id = self.kwargs['menu_item_id']
        return UserReview.objects.filter(menu_item_id=menu_item_id).order_by('-review_date')

3. home/urls.py

Add routes for the new views:

from django.urls import path
from .views import UserReviewCreateView, MenuItemReviewListView

urlpatterns = [
    path('reviews/create/', UserReviewCreateView.as_view(), name='create-review'),
    path('reviews/menu-item/<int:menu_item_id>/', MenuItemReviewListView.as_view(), name='menu-item-reviews'),
]

4. Example API Endpoints
Create Review (Authenticated User)

POST /api/reviews/create/

{
  "menu_item": 2,
  "rating": 5,
  "comment": "Delicious and well-prepared!"
}


Response:

{
  "id": 1,
  "user": 3,
  "menu_item": 2,
  "rating": 5,
  "comment": "Delicious and well-prepared!",
  "review_date": "2025-09-22T09:45:12Z"
}

Get Reviews for a Menu Item

GET /api/reviews/menu-item/2/

Response:

[
  {
    "id": 1,
    "user": 3,
    "menu_item": 2,
    "rating": 5,
    "comment": "Delicious and well-prepared!",
    "review_date": "2025-09-22T09:45:12Z"
  },
  {
    "id": 2,
    "user": 4,
    "menu_item": 2,
    "rating": 4,
    "comment": "Tasty, but portion size could be bigger.",
    "review_date": "2025-09-22T10:05:33Z"
  }
]
