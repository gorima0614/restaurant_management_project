✅ orders/models.py
from django.db import models

class OrderManager(models.Manager):
    def with_status(self, status):
        """Return all orders with the given status."""
        return self.filter(status=status)

    def pending(self):
        """Shortcut to get all pending orders."""
        return self.with_status('pending')

    def completed(self):
        """Shortcut to get all completed orders."""
        return self.with_status('completed')

    def cancelled(self):
        """Shortcut to get all cancelled orders."""
        return self.with_status('cancelled')

class Order(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('completed', 'Completed'),
        ('cancelled', 'Cancelled'),
    ]

    customer = models.CharField(max_length=100)  # Example field
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    created_at = models.DateTimeField(auto_now_add=True)

    # Attach custom manager
    objects = OrderManager()

    def __str__(self):
        return f"Order #{self.id} - {self.status}"

✅ Usage in Django shell
Run:

python manage.py shell
from orders.models import Order

# Create test orders
Order.objects.create(customer="Alice", status="pending")
Order.objects.create(customer="Bob", status="completed")
Order.objects.create(customer="Charlie", status="pending")

# Use custom manager methods
pending_orders = Order.objects.pending()
print(pending_orders)  
# <QuerySet [<Order: Order #1 - pending>, <Order: Order #3 - pending>]>

completed_orders = Order.objects.completed()
print(completed_orders)  
# <QuerySet [<Order: Order #2 - completed>]>
