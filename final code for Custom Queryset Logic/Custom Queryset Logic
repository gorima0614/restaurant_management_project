# models.py

from django.db import models

class ProductQuerySet(models.QuerySet):
    def with_min_quantity(self, min_qty):
        return self.filter(quantity__gt=min_qty)

class ProductManager(models.Manager):
    def get_queryset(self):
        return ProductQuerySet(self.model, using=self._db)

    def with_min_quantity(self, min_qty):
        return self.get_queryset().with_min_quantity(min_qty)

class Product(models.Model):
    name = models.CharField(max_length=100)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    quantity = models.IntegerField()

    objects = ProductManager()

    def __str__(self):
        return self.name

# serializers.py

from rest_framework import serializers
from .models import Product

class ProductSerializer(serializers.ModelSerializer):
    class Meta:
        model = Product
        fields = ['id', 'name', 'price', 'quantity']

# views.py

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .models import Product
from .serializers import ProductSerializer

class ProductsWithMinQuantityView(APIView):
    def get(self, request):
        min_qty = request.query_params.get('min_qty', 0)
        try:
            min_qty = int(min_qty)
        except ValueError:
            return Response({'error': 'Invalid min_qty value'}, status=status.HTTP_400_BAD_REQUEST)

        products = Product.objects.with_min_quantity(min_qty)
        serializer = ProductSerializer(products, many=True)
        return Response(serializer.data)

# urls.py

from django.urls import path
from .views import ProductsWithMinQuantityView

urlpatterns = [
    path('api/products/min-quantity/', ProductsWithMinQuantityView.as_view(), name='min-quantity-products'),
]

[
  {
    "id": 1,
    "name": "Laptop",
    "price": "59999.00",
    "quantity": 20
  },
  {
    "id": 3,
    "name": "Keyboard",
    "price": "999.00",
    "quantity": 15
  }
]


