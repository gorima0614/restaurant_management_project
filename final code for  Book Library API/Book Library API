# library/models.py
from django.db import models

class Author(models.Model):
    name = models.CharField(max_length=100)
    bio = models.TextField(blank=True)

    def __str__(self):
        return self.name

class Book(models.Model):
    title = models.CharField(max_length=200)
    description = models.TextField(blank=True)
    authors = models.ManyToManyField(Author, related_name='books')
    published_date = models.DateField()

    def __str__(self):
        return self.title

# library/serializers.py
from rest_framework import serializers
from .models import Book, Author

class AuthorSerializer(serializers.ModelSerializer):
    class Meta:
        model = Author
        fields = ['id', 'name', 'bio']

class BookSerializer(serializers.ModelSerializer):
    authors = AuthorSerializer(many=True)

    class Meta:
        model = Book
        fields = ['id', 'title', 'description', 'authors', 'published_date']

    def create(self, validated_data):
        authors_data = validated_data.pop('authors')
        book = Book.objects.create(**validated_data)
        for author_data in authors_data:
            author, _ = Author.objects.get_or_create(**author_data)
            book.authors.add(author)
        return book

    def update(self, instance, validated_data):
        authors_data = validated_data.pop('authors', None)
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()

        if authors_data is not None:
            instance.authors.clear()
            for author_data in authors_data:
                author, _ = Author.objects.get_or_create(**author_data)
                instance.authors.add(author)

        return instance

# library/views.py
from rest_framework import generics
from .models import Book
from .serializers import BookSerializer

class BookListCreateAPIView(generics.ListCreateAPIView):
    queryset = Book.objects.all()
    serializer_class = BookSerializer

class BookRetrieveUpdateAPIView(generics.RetrieveUpdateAPIView):
    queryset = Book.objects.all()
    serializer_class = BookSerializer

# library/urls.py
from django.urls import path
from .views import BookListCreateAPIView, BookRetrieveUpdateAPIView

urlpatterns = [
    path('books/', BookListCreateAPIView.as_view(), name='book-list-create'),
    path('books/<int:pk>/', BookRetrieveUpdateAPIView.as_view(), name='book-detail-update'),
]

# project/urls.py
from django.urls import path, include

urlpatterns = [
    path('api/', include('library.urls')),
]

{
  "title": "The Pragmatic Programmer",
  "description": "A book about software craftsmanship.",
  "published_date": "1999-10-30",
  "authors": [
    { "name": "Andy Hunt", "bio": "Co-author of The Pragmatic Programmer" },
    { "name": "Dave Thomas", "bio": "Also co-author and software developer" }
  ]
}

{
  "id": 1,
  "title": "The Pragmatic Programmer",
  "description": "A book about software craftsmanship.",
  "published_date": "1999-10-30",
  "authors": [
    { "id": 1, "name": "Andy Hunt", "bio": "Co-author of The Pragmatic Programmer" },
    { "id": 2, "name": "Dave Thomas", "bio": "Also co-author and software developer" }
  ]
}

{
  "title": "The Pragmatic Programmer (Updated)",
  "description": "Updated edition of a software classic.",
  "published_date": "2019-10-30",
  "authors": [
    { "name": "Andy Hunt", "bio": "Updated bio" }
  ]
}
