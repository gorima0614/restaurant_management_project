1. Serializer

If you have a Review model like this:

# reviews/models.py
from django.db import models

class Review(models.Model):
    review_text = models.TextField()
    rating = models.PositiveSmallIntegerField()  # 1–5
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"⭐ {self.rating} - {self.review_text[:30]}"


Create a serializer:

# reviews/serializers.py
from rest_framework import serializers
from .models import Review

class ReviewSerializer(serializers.ModelSerializer):
    class Meta:
        model = Review
        fields = ["id", "review_text", "rating", "created_at"]

2. API View

We’ll use DRF’s generic ListAPIView, which already supports pagination.

# reviews/views.py
from rest_framework import generics, status
from rest_framework.response import Response
from django.db import DatabaseError
from .models import Review
from .serializers import ReviewSerializer

class ReviewListAPIView(generics.ListAPIView):
    queryset = Review.objects.all().order_by("-created_at")  # newest first
    serializer_class = ReviewSerializer

    def list(self, request, *args, **kwargs):
        try:
            return super().list(request, *args, **kwargs)
        except DatabaseError:
            return Response(
                {"error": "Database error occurred while fetching reviews."},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR,
            )

3. Pagination Setup

In settings.py, enable pagination:

# settings.py
REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,  # adjust as needed
}

4. URL Configuration

Add to your app’s urls.py:

# reviews/urls.py
from django.urls import path
from .views import ReviewListAPIView

urlpatterns = [
    path("reviews/", ReviewListAPIView.as_view(), name="review-list"),
]


Include in project urls.py:

from django.urls import path, include

urlpatterns = [
    path("api/", include("reviews.urls")),
]

5. Testing

Run server:

python manage.py runserver


Using curl:

curl http://127.0.0.1:8000/api/reviews/


Using Postman:

Method: GET

URL: http://127.0.0.1:8000/api/reviews/

Response (example):

{
  "count": 25,
  "next": "http://127.0.0.1:8000/api/reviews/?page=2",
  "previous": null,
  "results": [
    {
      "id": 1,
      "review_text": "Great food and quick service!",
      "rating": 5,
      "created_at": "2025-09-30T10:12:00Z"
    },
    {
      "id": 2,
      "review_text": "Average taste, but friendly staff.",
      "rating": 3,
      "created_at": "2025-09-30T09:55:00Z"
    }
  ]
}
