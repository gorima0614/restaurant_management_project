1. Model – home/models.py
from django.db import models
from django.utils import timezone
from datetime import timedelta

class ReservationManager(models.Manager):
    def find_available_slots(self, table_number: int, start_datetime, end_datetime, slot_length_minutes=60):
        """
        Find available reservation slots for a table within the given range.

        Args:
            table_number (int): The table to check availability for.
            start_datetime (datetime): Start of the search window.
            end_datetime (datetime): End of the search window.
            slot_length_minutes (int): Duration of a reservation slot in minutes (default = 60).

        Returns:
            list of (datetime, datetime): A list of tuples representing available slot start and end times.
        """

        # Ensure valid range
        if end_datetime <= start_datetime:
            return []

        # Step 1: Fetch reservations for this table in the given window
        # Overlap condition: start < existing_end AND end > existing_start
        existing_reservations = self.filter(
            table_number=table_number,
            start_time__lt=end_datetime,
            end_time__gt=start_datetime
        ).order_by("start_time")

        # Step 2: Generate candidate slots in the range
        available_slots = []
        slot_length = timedelta(minutes=slot_length_minutes)

        current_start = start_datetime
        while current_start + slot_length <= end_datetime:
            current_end = current_start + slot_length

            # Step 3: Check overlap with reservations
            overlap = existing_reservations.filter(
                start_time__lt=current_end,
                end_time__gt=current_start
            ).exists()

            if not overlap:
                available_slots.append((current_start, current_end))

            # move to next candidate
            current_start = current_end

        return available_slots

class Reservation(models.Model):
    customer_name = models.CharField(max_length=150)
    table_number = models.PositiveIntegerField()
    start_time = models.DateTimeField()
    end_time = models.DateTimeField()

    objects = ReservationManager()

    class Meta:
        ordering = ['start_time']
        indexes = [
            models.Index(fields=['table_number', 'start_time', 'end_time'])
        ]

    def __str__(self):
        return f"Reservation for {self.customer_name} at table {self.table_number} ({self.start_time} - {self.end_time})"

    def duration(self):
        """Helper to get duration of reservation in minutes."""
        return (self.end_time - self.start_time).total_seconds() / 60.0

2. Example Usage in Django Shell
from datetime import datetime, timedelta
from home.models import Reservation

# Define the window we want to search
start = datetime(2025, 9, 24, 18, 0)  # 6:00 PM
end = datetime(2025, 9, 24, 23, 0)    # 11:00 PM

# Example: check availability for table 1 with 1-hour slots
available = Reservation.objects.find_available_slots(
    table_number=1,
    start_datetime=start,
    end_datetime=end,
    slot_length_minutes=60
)

print("Available Slots:")
for slot in available:
    print(f"{slot[0]} - {slot[1]}")

3. Example Data

Suppose you already have reservations:

6:00–7:00 PM (Table 1)

8:00–9:00 PM (Table 1)

Then running the above query would output:

Available Slots:
2025-09-24 19:00:00 - 2025-09-24 20:00:00
2025-09-24 21:00:00 - 2025-09-24 22:00:00
2025-09-24 22:00:00 - 2025-09-24 23:00:00
