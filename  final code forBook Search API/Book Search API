from django.db import models

class Book(models.Model):
    title = models.CharField(max_length=255)
    author = models.CharField(max_length=255)
    category = models.CharField(max_length=100)  # You can later use a FK if needed
    published_date = models.DateField(null=True, blank=True)

    def __str__(self):
        return self.title

from rest_framework import serializers
from .models import Book

class BookSerializer(serializers.ModelSerializer):
    class Meta:
        model = Book
        fields = ['id', 'title', 'author', 'category', 'published_date']

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from django.db.models import Q
from .models import Book
from .serializers import BookSerializer

class BookSearchView(APIView):
    """
    Search books by title, author, or category using the `q` query parameter.
    Example: /api/books/search/?q=history
    """
    def get(self, request):
        query = request.query_params.get('q', '').strip()

        if query:
            books = Book.objects.filter(
                Q(title__icontains=query) |
                Q(author__icontains=query) |
                Q(category__icontains=query)
            ).distinct()
        else:
            books = Book.objects.none()

        serializer = BookSerializer(books, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

from django.urls import path
from .views import BookSearchView

urlpatterns = [
    path('books/search/', BookSearchView.as_view(), name='book-search'),
]

# python manage.py shell

from app.models import Book
Book.objects.create(title="The Science of Everything", author="John Doe", category="Science", published_date="2022-03-10")
Book.objects.create(title="History of Time", author="Stephen Hawking", category="Physics", published_date="1998-07-01")
Book.objects.create(title="Intro to Django", author="Jane Smith", category="Programming", published_date="2020-01-01")

GET /api/books/search/?q=django

[
  {
    "id": 3,
    "title": "Intro to Django",
    "author": "Jane Smith",
    "category": "Programming",
    "published_date": "2020-01-01"
  }
]

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

from rest_framework.pagination import PageNumberPagination

class BookSearchView(APIView):
    def get(self, request):
        query = request.query_params.get('q', '').strip()

        if query:
            books = Book.objects.filter(
                Q(title__icontains=query) |
                Q(author__icontains=query) |
                Q(category__icontains=query)
            ).distinct()
        else:
            books = Book.objects.none()

        paginator = PageNumberPagination()
        result_page = paginator.paginate_queryset(books, request)
        serializer = BookSerializer(result_page, many=True)
        return paginator.get_paginated_response(serializer.data)

