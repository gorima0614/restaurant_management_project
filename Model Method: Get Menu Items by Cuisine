# models.py

from django.db import models

class MenuItem(models.Model):
    name = models.CharField(max_length=100)
    price = models.DecimalField(max_digits=6, decimal_places=2)
    cuisine_type = models.CharField(max_length=50)

    def __str__(self):
        return self.name

    @classmethod
    def filter_by_cuisine(cls, cuisine_type: str):
        """
        Returns a queryset of MenuItem objects filtered by cuisine type.
        """
        return cls.objects.filter(cuisine_type__iexact=cuisine_type)
Explanation:
I used a class method (@classmethod) because filtering should be done at the model/class level (not for a single instance).
cuisine_type__iexact ensures the filter is case-insensitive. (So "Italian" and "italian" both work.)
Returns a queryset, which can be chained with other filters if needed.

How to test in Django shell
Run:
python manage.py shell
from yourapp.models import MenuItem

# Example menu items
MenuItem.objects.create(name="Margherita Pizza", price=300, cuisine_type="Italian")
MenuItem.objects.create(name="Pasta", price=250, cuisine_type="Italian")
MenuItem.objects.create(name="Sushi", price=500, cuisine_type="Japanese")

# Retrieve all Italian dishes
italian_items = MenuItem.filter_by_cuisine("Italian")
print(italian_items)  # Should list Pizza and Pasta

# Case-insensitive check
italian_items2 = MenuItem.filter_by_cuisine("italian")
print(italian_items2)  # Should also list Pizza and Pasta
