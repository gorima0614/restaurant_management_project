1️⃣ Models (models.py)
from django.db import models
from django.contrib.auth.models import User


class Rider(models.Model):
    """Profile model for Riders."""
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="rider_profile")
    phone_number = models.CharField(max_length=15, unique=True)
    preferred_payment_method = models.CharField(max_length=50)
    default_pickup_address = models.CharField(max_length=255, blank=True, null=True)

    def __str__(self):
        return f"Rider: {self.user.username}"


class Driver(models.Model):
    """Profile model for Drivers."""
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="driver_profile")
    phone_number = models.CharField(max_length=15, unique=True)
    license_number = models.CharField(max_length=50, unique=True)
    vehicle_make = models.CharField(max_length=50)
    vehicle_model = models.CharField(max_length=50)
    vehicle_plate_number = models.CharField(max_length=20, unique=True)

    def __str__(self):
        return f"Driver: {self.user.username} ({self.vehicle_plate_number})"


2️⃣ Serializers (serializers.py)
from rest_framework import serializers
from django.contrib.auth.models import User
from .models import Rider, Driver


class UserSerializer(serializers.ModelSerializer):
    """Handles user creation with password hashing."""
    class Meta:
        model = User
        fields = ["username", "email", "password"]
        extra_kwargs = {"password": {"write_only": True}}

    def create(self, validated_data):
        return User.objects.create_user(**validated_data)


class RiderSerializer(serializers.ModelSerializer):
    """Handles Rider creation with nested User data."""
    username = serializers.CharField(write_only=True)
    email = serializers.EmailField(write_only=True)
    password = serializers.CharField(write_only=True)

    class Meta:
        model = Rider
        fields = ["username", "email", "password", "phone_number", "preferred_payment_method", "default_pickup_address"]

    def validate(self, attrs):
        if User.objects.filter(username=attrs["username"]).exists():
            raise serializers.ValidationError({"username": "Username already taken."})
        if User.objects.filter(email=attrs["email"]).exists():
            raise serializers.ValidationError({"email": "Email already registered."})
        return attrs

    def create(self, validated_data):
        username = validated_data.pop("username")
        email = validated_data.pop("email")
        password = validated_data.pop("password")
        user = User.objects.create_user(username=username, email=email, password=password)
        rider = Rider.objects.create(user=user, **validated_data)
        return rider


class DriverSerializer(serializers.ModelSerializer):
    """Handles Driver creation with nested User data."""
    username = serializers.CharField(write_only=True)
    email = serializers.EmailField(write_only=True)
    password = serializers.CharField(write_only=True)

    class Meta:
        model = Driver
        fields = [
            "username", "email", "password",
            "phone_number", "license_number", "vehicle_make", "vehicle_model", "vehicle_plate_number"
        ]

    def validate(self, attrs):
        if User.objects.filter(username=attrs["username"]).exists():
            raise serializers.ValidationError({"username": "Username already taken."})
        if User.objects.filter(email=attrs["email"]).exists():
            raise serializers.ValidationError({"email": "Email already registered."})
        return attrs

    def create(self, validated_data):
        username = validated_data.pop("username")
        email = validated_data.pop("email")
        password = validated_data.pop("password")
        user = User.objects.create_user(username=username, email=email, password=password)
        driver = Driver.objects.create(user=user, **validated_data)
        return driver

3️⃣ Views (views.py)
from rest_framework.response import Response
from rest_framework import status, generics
from .models import Rider, Driver
from .serializers import RiderSerializer, DriverSerializer


class RiderRegistrationView(generics.CreateAPIView):
    """POST /api/register/rider/ - Register a new rider."""
    queryset = Rider.objects.all()
    serializer_class = RiderSerializer

    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        rider = serializer.save()
        return Response(
            {
                "message": "Rider registered successfully",
                "rider": {
                    "username": rider.user.username,
                    "email": rider.user.email,
                    "phone_number": rider.phone_number,
                    "preferred_payment_method": rider.preferred_payment_method,
                },
            },
            status=status.HTTP_201_CREATED,
        )


class DriverRegistrationView(generics.CreateAPIView):
    """POST /api/register/driver/ - Register a new driver."""
    queryset = Driver.objects.all()
    serializer_class = DriverSerializer

    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        driver = serializer.save()
        return Response(
            {
                "message": "Driver registered successfully",
                "driver": {
                    "username": driver.user.username,
                    "email": driver.user.email,
                    "phone_number": driver.phone_number,
                    "vehicle": f"{driver.vehicle_make} {driver.vehicle_model}",
                    "plate_number": driver.vehicle_plate_number,
                },
            },
            status=status.HTTP_201_CREATED,
        )

4️⃣ URLs (urls.py)
from django.urls import path
from .views import RiderRegistrationView, DriverRegistrationView

urlpatterns = [
    path("register/rider/", RiderRegistrationView.as_view(), name="register_rider"),
    path("register/driver/", DriverRegistrationView.as_view(), name="register_driver"),
]

5️⃣ Example Requests & Responses
➤ Rider Registration
Request
POST /api/register/rider/
{
  "username": "john123",
  "email": "john@example.com",
  "password": "secret123",
  "phone_number": "9876543210",
  "preferred_payment_method": "credit_card",
  "default_pickup_address": "123 Main Street"
}

Response
{
  "message": "Rider registered successfully",
  "rider": {
    "username": "john123",
    "email": "john@example.com",
    "phone_number": "9876543210",
    "preferred_payment_method": "credit_card"
  }
}

➤ Driver Registration
Request
POST /api/register/driver/
{
  "username": "driver007",
  "email": "driver@example.com",
  "password": "secret123",
  "phone_number": "9876543210",
  "license_number": "KA123456789",
  "vehicle_make": "Toyota",
  "vehicle_model": "Innova",
  "vehicle_plate_number": "KA05AB1234"
}

Response
{
  "message": "Driver registered successfully",
  "driver": {
    "username": "driver007",
    "email": "driver@example.com",
    "phone_number": "9876543210",
    "vehicle": "Toyota Innova",
    "plate_number": "KA05AB1234"
  }
}
