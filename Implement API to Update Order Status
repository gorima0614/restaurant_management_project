✅ 1. Order Model (orders/models.py)
from django.db import models
from django.conf import settings

class Order(models.Model):
    STATUS_CHOICES = [
        ("PENDING", "Pending"),
        ("PROCESSING", "Processing"),
        ("COMPLETED", "Completed"),
    ]

    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="orders")
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default="PENDING")
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Order #{self.id} - {self.status}"

✅ 2. Serializer (orders/serializers.py)
from rest_framework import serializers
from .models import Order


class OrderStatusUpdateSerializer(serializers.Serializer):
    order_id = serializers.IntegerField()
    status = serializers.ChoiceField(choices=Order.STATUS_CHOICES)

    def validate_order_id(self, value):
        if not Order.objects.filter(id=value).exists():
            raise serializers.ValidationError("Invalid order ID.")
        return value

    def update_status(self):
        order_id = self.validated_data["order_id"]
        new_status = self.validated_data["status"]

        order = Order.objects.get(id=order_id)
        order.status = new_status
        order.save()
        return order

✅ 3. API View (orders/views.py)
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .serializers import OrderStatusUpdateSerializer


class OrderStatusUpdateView(APIView):
    """
    API endpoint to update the status of an existing order.
    """

    def put(self, request, *args, **kwargs):
        serializer = OrderStatusUpdateSerializer(data=request.data)
        if serializer.is_valid():
            order = serializer.update_status()
            return Response(
                {
                    "message": "Order status updated successfully.",
                    "order_id": order.id,
                    "new_status": order.status,
                },
                status=status.HTTP_200_OK,
            )
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

✅ 4. URL Routing (orders/urls.py)
from django.urls import path
from .views import OrderStatusUpdateView

urlpatterns = [
    path("orders/update-status/", OrderStatusUpdateView.as_view(), name="order-status-update"),
]

✅ 5. Example Usage
Request
PUT /api/orders/update-status/
Content-Type: application/json

{
  "order_id": 5,
  "status": "COMPLETED"
}

Success Response
{
  "message": "Order status updated successfully.",
  "order_id": 5,
  "new_status": "COMPLETED"
}

Error Response (Invalid ID)
{
  "order_id": ["Invalid order ID."]
}

Error Response (Invalid Status)
{
  "status": ["\"SHIPPED\" is not a valid choice."]
}
