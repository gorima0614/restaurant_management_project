Step 1: Create the MenuItem model (if not already done)
If your project already has a MenuItem model, skip this step.

# home/models.py
from django.db import models
class MenuItem(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True)
    price = models.DecimalField(max_digits=8, decimal_places=2)
    category = models.CharField(max_length=50)
    def __str__(self):
        return f"{self.name} ({self.category})"

 Step 2: Create the Serializer
Create a new file (if it doesn’t exist):
home/serializers.py
# home/serializers.py
from rest_framework import serializers
from .models import MenuItem
class MenuItemSerializer(serializers.ModelSerializer):
    class Meta:
        model = MenuItem
        fields = ['id', 'name', 'description', 'price', 'category']

This serializer converts MenuItem objects into JSON-friendly data.

 Step 3: Create the API View
In your file:
home/views.py
You can use either a ViewSet or a ListAPIView.
Here’s an example using ModelViewSet with category filtering support:

# home/views.py
from rest_framework import viewsets
from rest_framework.response import Response
from .models import MenuItem
from .serializers import MenuItemSerializer
class MenuItemViewSet(viewsets.ReadOnlyModelViewSet):
    serializer_class = MenuItemSerializer
    def get_queryset(self):
        queryset = MenuItem.objects.all()
        category = self.request.query_params.get('category')
        if category:
            queryset = queryset.filter(category__iexact=category)
        return queryset


-> This view:
Returns all menu items.
Optionally filters by ?category=Drinks, ?category=Pizza, etc.

Step 4: Register the Route
In your file:
home/urls.py

# home/urls.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import MenuItemViewSet
router = DefaultRouter()
router.register(r'menu-items', MenuItemViewSet, basename='menuitem')
urlpatterns = [
    path('', include(router.urls)),
]

This automatically creates routes like:
GET /menu-items/ → list all menu items
GET /menu-items/?category=Drinks → filter by category

 Step 5: Test the Endpoint

Run your server:
python manage.py runserver

Then test using your browser or Postman:
GET http://127.0.0.1:8000/menu-items/
GET http://127.0.0.1:8000/menu-items/?category=Main Course

 Example JSON Response
[
  {
    "id": 1,
    "name": "Margherita Pizza",
    "description": "Classic cheese and tomato pizza.",
    "price": "299.00",
    "category": "Pizza"
  },
  {
    "id": 2,
    "name": "Cappuccino",
    "description": "Hot coffee with milk foam.",
    "price": "150.00",
    "category": "Drinks"
  }
]
