# orders/models.py

from django.db import models

class Customer(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()


class Order(models.Model):
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, related_name="orders")
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Order #{self.id} - {self.customer.name}"

    def get_total_item_count(self) -> int:
        """
        Returns the total number of items in this order
        by summing the quantities of related OrderItems.
        """
        return sum(item.quantity for item in self.items.all())


class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name="items")
    menu_item = models.CharField(max_length=100)  # replace with ForeignKey(MenuItem) if you already have MenuItem model
    quantity = models.PositiveIntegerField(default=1)

    def __str__(self):
        return f"{self.quantity} Ã— {self.menu_item}"

python manage.py shell

from orders.models import Customer, Order, OrderItem

# Create customer and order
cust = Customer.objects.create(name="Alice", email="alice@example.com")
order = Order.objects.create(customer=cust)

# Add items
OrderItem.objects.create(order=order, menu_item="Pizza", quantity=2)
OrderItem.objects.create(order=order, menu_item="Pasta", quantity=3)

# Get total item count
print(order.get_total_item_count())  # Output: 5
