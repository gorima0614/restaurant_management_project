1. orders/models.py (example structure)
Assuming you already have an Order and OrderItem model:

from django.db import models
from django.contrib.auth.models import User
from home.models import MenuCategory  # example usage if needed
from menu.models import MenuItem      # assuming MenuItem exists

class Order(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="orders")
    total_price = models.DecimalField(max_digits=10, decimal_places=2)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Order #{self.id} by {self.user.username}"

class OrderItem(models.Model):
    order = models.ForeignKey(Order, related_name="items", on_delete=models.CASCADE)
    item = models.ForeignKey(MenuItem, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)
    price = models.DecimalField(max_digits=8, decimal_places=2)

    def __str__(self):
        return f"{self.quantity} x {self.item.name}"

2. orders/serializers.py
We need nested serialization so the order includes its items:

from rest_framework import serializers
from .models import Order, OrderItem

class OrderItemSerializer(serializers.ModelSerializer):
    item_name = serializers.CharField(source="item.name", read_only=True)

    class Meta:
        model = OrderItem
        fields = ["id", "item_name", "quantity", "price"]

class OrderSerializer(serializers.ModelSerializer):
    items = OrderItemSerializer(many=True, read_only=True)
    user = serializers.StringRelatedField()  # shows username/email

    class Meta:
        model = Order
        fields = ["id", "user", "total_price", "created_at", "items"]

3. orders/views.py
Use DRFâ€™s RetrieveAPIView to get a specific order:

from rest_framework import generics, permissions
from .models import Order
from .serializers import OrderSerializer

class OrderDetailView(generics.RetrieveAPIView):
    queryset = Order.objects.all()
    serializer_class = OrderSerializer
    permission_classes = [permissions.IsAuthenticated]
    lookup_field = "id"   # so we can pass /orders/<id>/

4. orders/urls.py
Add the route:

from django.urls import path
from .views import OrderDetailView

urlpatterns = [
    path("<int:id>/", OrderDetailView.as_view(), name="order-detail"),
]

5. Example Test (via curl or Postman)
Request:
GET http://127.0.0.1:8000/api/orders/1/
Authorization: Token <your-auth-token>

Response:
{
  "id": 1,
  "user": "alice",
  "total_price": "450.00",
  "created_at": "2025-09-15T12:45:23Z",
  "items": [
    {
      "id": 1,
      "item_name": "Margherita Pizza",
      "quantity": 2,
      "price": "200.00"
    },
    {
      "id": 2,
      "item_name": "Coke",
      "quantity": 1,
      "price": "50.00"
    }
  ]
}
