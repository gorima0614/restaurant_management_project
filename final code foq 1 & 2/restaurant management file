1. Order table
# orders/models.py

from django.db import models
import uuid
class Order(models.Model):
    order_id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
    customer_name = models.CharField(max_length=100)
    note = models.TextField(blank=True, null=True)
    total_order_amount = models.DecimalField(max_digits=10, decimal_places=2)
    is_paid = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Order {self.order_id} by {self.customer_name}"
class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='items')
    item_name = models.CharField(max_length=100)
    quantity = models.PositiveIntegerField()
    price = models.DecimalField(max_digits=8, decimal_places=2)  # price per item

    def __str__(self):
        return f"{self.quantity} x {self.item_name} for Order {self.order.order_id}"

    def get_total_price(self):
        return self.quantity * self.price
python manage.py makemigrations orders
python manage.py migrate
# orders/admin.py

from django.contrib import admin
from .models import Order, OrderItem

class OrderItemInline(admin.TabularInline):
    model = OrderItem
    extra = 1

@admin.register(Order)
class OrderAdmin(admin.ModelAdmin):
    list_display = ['order_id', 'customer_name', 'total_order_amount', 'is_paid', 'created_at']
    inlines = [OrderItemInline]

admin.site.register(OrderItem)
python manage.py shell
from orders.models import Order, OrderItem

# Create a new order
order = Order.objects.create(customer_name="Alice", note="No onions", total_order_amount=0)

# Add items to the order
item1 = OrderItem.objects.create(order=order, item_name="Burger", quantity=2, price=5.00)
item2 = OrderItem.objects.create(order=order, item_name="Fries", quantity=1, price=2.50)

# Update total
order.total_order_amount = item1.get_total_price() + item2.get_total_price()
order.save()

2.OrderItem table
# models.py

from django.db import models
import uuid

class Order(models.Model):
    order_id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
    customer_name = models.CharField(max_length=100)
    note = models.TextField(blank=True, null=True)
    total_order_amount = models.DecimalField(max_digits=10, decimal_places=2)
    is_paid = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Order {self.order_id} by {self.customer_name}"


class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='items')
    item_name = models.CharField(max_length=100)
    item_price = models.DecimalField(max_digits=8, decimal_places=2)
    qnty = models.PositiveIntegerField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.qnty} x {self.item_name} (Order {self.order.order_id})"

    def get_total_price(self):
        return self.qnty * self.item_price
