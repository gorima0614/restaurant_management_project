1. Example MenuItem model (menu/models.py)
(assuming you already have this)

from django.db import models
from home.models import MenuCategory

class MenuItem(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True, null=True)
    price = models.DecimalField(max_digits=8, decimal_places=2)
    available = models.BooleanField(default=True)
    category = models.ForeignKey(MenuCategory, on_delete=models.CASCADE, related_name="menu_items")

    def __str__(self):
        return self.name

2. Serializer with validation (menu/serializers.py)
from rest_framework import serializers
from .models import MenuItem

class MenuItemSerializer(serializers.ModelSerializer):
    class Meta:
        model = MenuItem
        fields = ["id", "name", "description", "price", "available", "category"]

    def validate_price(self, value):
        if value <= 0:
            raise serializers.ValidationError("Price must be a positive number.")
        return value

3. Create a ViewSet for updating (menu/views.py)
We’ll use ModelViewSet, but restrict permissions so only staff/admin users can update.

from rest_framework import viewsets, permissions
from rest_framework.exceptions import NotFound
from .models import MenuItem
from .serializers import MenuItemSerializer

class IsAdminOrReadOnly(permissions.BasePermission):
    """
    Allow only admin/staff users to modify menu items.
    """
    def has_permission(self, request, view):
        if request.method in permissions.SAFE_METHODS:
            return True
        return request.user and request.user.is_staff

class MenuItemViewSet(viewsets.ModelViewSet):
    queryset = MenuItem.objects.all()
    serializer_class = MenuItemSerializer
    permission_classes = [IsAdminOrReadOnly]

    def get_object(self):
        try:
            return super().get_object()
        except Exception:
            raise NotFound("Menu item not found.")

4. Add routing (menu/urls.py)
We’ll use DRF’s DefaultRouter for clean RESTful URLs:

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import MenuItemViewSet

router = DefaultRouter()
router.register(r'items', MenuItemViewSet, basename='menuitem')

urlpatterns = [
    path('', include(router.urls)),
]

5. Project-level urls.py
Ensure your menu app’s URLs are included:

from django.urls import path, include

urlpatterns = [
    path('api/menu/', include('menu.urls')),
]

✅ Example Usage (Update Menu Item)

PUT request

PUT http://127.0.0.1:8000/api/menu/items/3/
Content-Type: application/json
Authorization: Token <admin-token>


Request body

{
  "name": "Veggie Burger",
  "description": "Delicious grilled veggie patty",
  "price": 220.50,
  "available": true,
  "category": 2
}


Response (200 OK)

{
  "id": 3,
  "name": "Veggie Burger",
  "description": "Delicious grilled veggie patty",
  "price": "220.50",
  "available": true,
  "category": 2
}
